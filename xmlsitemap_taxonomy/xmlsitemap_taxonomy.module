<?php
// $Id$

/**
 * Implements hook_entity_info_alter().
 */
function xmlsitemap_taxonomy_entity_info_alter(&$entity_info) {
  $entity_info['taxonomy_term']['bundle label'] = t('Vocabulary');
  $entity_info['taxonomy_term']['xmlsitemap'] = array(
    'process callback' => 'xmlsitemap_taxonomy_xmlsitemap_process_taxonomy_term_links',
  );
  foreach (taxonomy_vocabulary_get_names() as $machine_name => $vocabulary) {
    $entity_info['taxonomy_term']['bundles'][$machine_name]['xmlsitemap'] = array(
      'priority' => variable_get('xmlsitemap_taxonomy_priority_' . $vocabulary->vid, 0.5),
      'status' => variable_get('xmlsitemap_taxonomy_status_' . $vocabulary->vid, 0),
    );
  }
}

/**
 * Implements hook_xmlsitemap_link_info_alter().
 */
function xmlsitemap_taxonomy_xmlsitemap_link_info_alter(&$link_info) {
  // Change taxonomy term bundle type from machine name to vid.
  $link_info['taxonomy_term']['object keys']['bundle'] = 'vid';
  foreach (taxonomy_vocabulary_get_names() as $machine_name => $vocabulary) {
    // Adjust the edit path to the *real* edit path.
    $link_info['taxonomy_term']['bundles'][$machine_name]['admin']['path'] .= '/edit';
    $link_info['taxonomy_term']['bundles'][$machine_name]['admin']['real path'] .= '/edit';
    $link_info['taxonomy_term']['bundles'][$vocabulary->vid] = $link_info['taxonomy_term']['bundles'][$machine_name];
    unset($link_info['taxonomy_term']['bundles'][$machine_name]);
  }
}

/**
 * Implements hook_cron().
 *
 * Process old taxonomy terms not found in the {xmlsitemap} table.
 */
function xmlsitemap_taxonomy_cron() {
  xmlsitemap_taxonomy_xmlsitemap_index_links(xmlsitemap_var('batch_limit'));
}

/**
 * Implements hook_xmlsitemap_index_links().
 */
function xmlsitemap_taxonomy_xmlsitemap_index_links($limit) {
  if ($vids = xmlsitemap_get_link_type_enabled_bundles('taxonomy_term')) {
    $tids = db_query_range("SELECT t.tid FROM {taxonomy_term_data} t LEFT JOIN {xmlsitemap} x ON x.type = 'taxonomy_term' AND t.tid = x.id WHERE x.id IS NULL AND t.vid IN (:vids) ORDER BY t.tid DESC", 0, $limit, array(':vids' => $vids))->fetchCol();
    xmlsitemap_taxonomy_xmlsitemap_process_taxonomy_term_links($tids);
  }
}

/**
 * Process taxonomy term sitemap links.
 *
 * @param $tids
 *   An array of taxonomy term IDs.
 */
function xmlsitemap_taxonomy_xmlsitemap_process_taxonomy_term_links(array $tids) {
  $terms = taxonomy_term_load_multiple($tids);
  foreach ($terms as $term) {
    $link = xmlsitemap_taxonomy_create_link($term);
    xmlsitemap_save_link($link);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see taxonomy_form_vocabulary()
 * @see xmlsitemap_add_form_type_options()
 */
function xmlsitemap_taxonomy_form_taxonomy_form_vocabulary_alter(&$form, $form_state) {
  $vid = isset($form['vid']['#value']) ? $form['vid']['#value'] : 0;

  module_load_include('inc', 'xmlsitemap', 'xmlsitemap.admin');
  $options = array(
    'status' => variable_get('xmlsitemap_taxonomy_status_' . $vid, 0),
    'priority' => variable_get('xmlsitemap_taxonomy_priority_' . $vid, 0.5),
  );
  xmlsitemap_add_form_type_options($form, 'taxonomy', $options);

  // The submit and delete buttons need to be weighted down.
  $form['submit'] += array('#weight' => 50);
  if (isset($form['delete'])) {
    $form['delete'] += array('#weight' => 51);
  }

  $form['#submit'][] = 'xmlsitemap_taxonomy_taxonomy_form_vocabulary_submit';
}

/**
 * Form submit handler; update settings when a taxonomy vocabulary is saved.
 */
function xmlsitemap_taxonomy_taxonomy_form_vocabulary_submit($form, $form_state) {
  $vid = $form_state['values']['vid'];
  $new_status = $form_state['values']['xmlsitemap_taxonomy_status'];
  $new_priority = $form_state['values']['xmlsitemap_taxonomy_priority'];

  if ($new_status != variable_get('xmlsitemap_taxonomy_status_' . $vid, 0)) {
    xmlsitemap_update_links(array('status' => $new_status), array('type' => 'taxonomy_term', 'subtype' => $vid, 'status_override' => 0));
  }
  if ($new_priority != variable_get('xmlsitemap_taxonomy_priority_' . $vid, 0.5)) {
    xmlsitemap_update_links(array('priority' => $new_priority), array('type' => 'taxonomy_term', 'subtype' => $vid, 'priority_override' => 0));
  }

  variable_set('xmlsitemap_taxonomy_status_' . $vid, $new_status);
  variable_set('xmlsitemap_taxonomy_priority_' . $vid, $new_priority);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function xmlsitemap_taxonomy_form_taxonomy_form_term_alter(&$form, $form_state) {
  // Because the same form is used for deletion in confirm_form, we must check
  // if the normal editing form elements are present. Hopefully this is fixed
  // in Drupal 7.
  if (isset($form['identification'])) {
    if ($form['#term']['tid']) {
      $term = taxonomy_term_load($form['#term']['tid']);
    }
    else {
      $term = (object) $form['#term'];
    }
    $term->vid = $form['vid']['#value'];
    $link = xmlsitemap_taxonomy_create_link($term);

    // Add the link options.
    module_load_include('inc', 'xmlsitemap', 'xmlsitemap.admin');
    xmlsitemap_add_form_link_options($form, $link);

    $form['xmlsitemap']['#access'] |= user_access('administer taxonomy');
    if (user_access('administer taxonomy')) {
      $form['xmlsitemap']['#description'] = t('The default priority for this vocabulary can be changed <a href="@link-type">here</a>.', array('@link-type' => url('admin/content/taxonomy/edit/vocabulary/' . $term->vid, array('query' => drupal_get_destination()))));
    }

    // The submit and delete buttons need to be weighted down.
    $form['submit'] += array('#weight' => 100);
    if (isset($form['delete'])) {
      $form['delete'] += array('#weight' => 110);
    }
  }
}

/**
 * Implements hook_taxonomy_vocabulary_delete().
 */
function xmlsitemap_taxonomy_vocabulary_delete(stdClass $vocabulary) {
  xmlsitemap_link_delete_multiple(array('type' => 'taxonomy_term', 'subtype' => $vocabulary->vid));
  variable_del('xmlsitemap_taxonomy_status_' . $vocabulary->vid);
  variable_del('xmlsitemap_taxonomy_priority_' . $vocabulary->vid);
}

/**
 * Implements hook_taxonomy_term_insert() {
 */
function xmlsitemap_taxonomy_term_insert(stdClass $term) {
  $link = xmlsitemap_taxonomy_create_link($term);
  xmlsitemap_save_link($link);
}

/**
 * Implements hook_taxonomy_term_update() {
 */
function xmlsitemap_taxonomy_term_update(stdClass $term) {
  $link = xmlsitemap_taxonomy_create_link($term);
  xmlsitemap_save_link($link);
}

/**
 * Implements hook_taxonomy_term_delete() {
 */
function xmlsitemap_taxonomy_term_delete(stdClass $term) {
  xmlsitemap_link_delete('taxonomy_term', $term->tid);
}

/**
 * Implements hook_field_extra_fields().
 */
function xmlsitemap_taxonomy_field_extra_fields() {
  $extras = array();
  $bundles = xmlsitemap_get_link_type_enabled_bundles('taxonomy_term');
  foreach (taxonomy_vocabulary_get_names() as $machine_name => $vocabulary) {
    if (!in_array($vocabulary->vid, $bundles)) {
      continue;
    }
    $extras['taxonomy_term'][$machine_name]['xmlsitemap'] = array(
      'label' => t('XML sitemap'),
      'description' => t('XML sitemap module element'),
      'weight' => 30,
    );
  }
  return $extras;
}

/**
 * Create a sitemap link from a taxonomy term.
 *
 * @param $term
 *   A taxonomy term object.
 * @return
 *   An array representing a sitemap link.
 */
function xmlsitemap_taxonomy_create_link(stdClass $term) {
  if (!isset($term->xmlsitemap)) {
    $term->xmlsitemap = array();
    if ($term->tid && $link = xmlsitemap_link_load('taxonomy_term', $term->tid)) {
      $term->xmlsitemap = $link;
    }
  }

  $term->xmlsitemap += array(
    'id' => $term->tid,
    'type' => 'taxonomy_term',
    'subtype' => $term->vid,
    'loc' => 'taxonomy/term/' . $term->tid,
    'status' => variable_get('xmlsitemap_taxonomy_status_' . $term->vid, 0),
    'status_default' => variable_get('xmlsitemap_taxonomy_status_' . $term->vid, 0),
    'status_override' => 0,
    'priority' => variable_get('xmlsitemap_taxonomy_priority_' . $term->vid, 0.5),
    'priority_default' => variable_get('xmlsitemap_taxonomy_priority_' . $term->vid, 0.5),
    'priority_override' => 0,
  );

  // The following values must always be checked because they are volatile.
  // @todo How can/should we check taxonomy term access?
  $term->xmlsitemap['access'] = 1;
  $term->xmlsitemap['language'] = isset($term->language) ? $term->language : LANGUAGE_NONE;

  return $term->xmlsitemap;
}

/**
 * Calculate the priority of a taxonomy term based on depth and weight.
 */
//function xmlsitemap_taxonomy_calculate_term_priority(stdClass $term) {
//  // Calculate priority.
//  // Min weight = -128
//  // Max weight = 127
//  // Max depth = ?
//}

/**
 * Find the tree depth of a taxonomy term.
 *
 * @param $term
 *   A taxonomy term object.
 * @return
 *   The tree depth of the term.
 */
function xmlsitemap_taxonomy_get_term_depth(stdClass $term) {
  static $depths = array();

  if (!isset($depths[$term->tid])) {
    if ($parent = db_query("SELECT parent FROM {taxonomy_term_hierarchy} WHERE tid = %d", $term->tid)->fetchField()) {
      // If the term has a parent, the term's depth is the parent's depth + 1.
      if (!isset($depths[$parent])) {
        $depths[$parent] = xmlsitemap_taxonomy_get_term_depth($parent);
      }
      $depths[$term->tid] = $depths[$parent] + 1;
    }
    else {
      // Term has no parents, so depth is 0.
      $depths[$term->tid] = 0;
    }
  }

  return $depths[$term->tid];
}

function xmlsitemap_taxonomy_get_node_count(stdClass $term) {
  // @todo Use db_rewrite_sql() w/ switch user.
  return db_query_range("SELECT COUNT(ti.nid) FROM {taxonomy_index} ti LEFT JOIN {node n} USING (nid) WHERE ti.tid = :tid AND n.status = 1", 0, 1, array(':tid' => $term->tid))->fetchField();
}

/**
 * Internal default variables for template_var().
 */
function xmlsitemap_taxonomy_variables() {
  $defaults = array(
    // Removed variables set to NULL.
    'xmlsitemap_taxonomy_include_empty_terms' => NULL,
    'xmlsitemap_taxonomy_calculate_priority' => NULL,
  );
  $vids = array_keys(taxonomy_get_vocabularies());
  foreach ($vids as $vid) {
    $defaults['xmlsitemap_taxonomy_status_' . $vid] = 0;
    $defaults['xmlsitemap_taxonomy_priority_' . $vid] = '0.5';
    $defaults['xmlsitemap_taxonomy_calculate_priority_' . $vid] = FALSE;
    $defaults['xmlsitemap_taxonomy_include_empty_terms_' . $vid] = FALSE;
    //$defaults += _xmlsitemap_taxonomy_variables_vid($vid);
  }
  return $defaults;
}

//function _xmlsitemap_taxonomy_variables_vid($vid) {
//  $defaults = array();
//  $defaults['xmlsitemap_taxonomy_status_' . $vid] = 0;
//  $defaults['xmlsitemap_taxonomy_priority_' . $vid] = 0.5;
//  $defaults['xmlsitemap_taxonomy_calculate_priority_' . $vid] = FALSE;
//  $defaults['xmlsitemap_taxonomy_include_empty_terms_' . $vid] = TRUE;
//  return $defaults;
//}
