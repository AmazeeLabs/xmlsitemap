<?php
// $Id$

/**
 * Implementation of hook_install().
 */
function xmlsitemap_node_install() {           
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("CREATE TABLE {xmlsitemap_node} (
        nid int,
        pid int,
        last_changed int(11),
        previously_changed int(11),
        last_comment int(11),
        previous_comment int(11),
        priority_override float,
        PRIMARY KEY (nid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;
    case 'pgsql':
      db_query("CREATE TABLE {xmlsitemap_node} (
        nid integer,
        pid integer,
        last_changed integer,
        previously_changed integer,
        last_comment integer,
        previous_comment integer,
        priority_override real,
        PRIMARY KEY (nid)
      );");
      break;
  }
}

/**
 * Implementation of hook_enable().
 */
function xmlsitemap_node_enable() {
  $weight = db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'pathautho'"));
  if ($weight !== FALSE) {
    db_query("UPDATE {system} SET weight = %d WHERE type = 'module' AND name = 'xmlsitemap_node'", ++$weight);
  }
  db_query("
    UPDATE {xmlsitemap_node} xn, {node} n
    SET xn.previously_changed = xn.last_changed, xn.last_changed = n.changed
    WHERE xn.nid = n.nid AND xn.last_changed <> n.changed
  ");
  db_query("
    UPDATE {xmlsitemap_node} xn, {node} n, {node_comment_statistics} s
    SET xn.last_comment = s.last_comment_timestamp
    WHERE xn.nid = s.nid
  ");
  db_query("
    INSERT INTO {xmlsitemap_node} (nid, pid, last_changed, last_comment, previous_comment)
    SELECT n.nid, ua.pid, n.changed, s.last_comment_timestamp, MAX(c.timestamp) FROM {node} n
    LEFT JOIN {node_comment_statistics} s ON s.nid = n.nid
    LEFT OUTER JOIN {comments} c ON c.nid = n.nid
    LEFT JOIN {url_alias} ua ON ua.src = CONCAT('node/', n.nid)
    LEFT JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
    WHERE xn.nid IS NULL AND (c.timestamp < s.last_comment_timestamp OR s.comment_count <= 1)
    GROUP BY n.nid
  ");
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_disable().
 */
function xmlsitemap_node_disable() {
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_uninstall().
 */
function xmlsitemap_node_uninstall() {
  db_query("DROP TABLE {xmlsitemap_node}");
  $settings = db_query("SELECT name FROM {variable} WHERE name LIKE 'xmlsitemap\_node\_%'");
  while ($variable = db_fetch_array($settings)) {
    variable_del($variable->name);
  }
}

